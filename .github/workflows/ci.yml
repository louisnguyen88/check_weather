name: CI Pipeline

on:
  push:
    branches:
      - "master"
      - "feature/**"
  pull_request:
    branches:
      - "master"
      - "feature/**"

env:
  AWS_REGION: ap-southeast-2 # Update to your AWS region
  ECR_REPOSITORY: check_weather
  IMAGE_TAG: ${{ github.sha }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      # Step 1: Check out code
      - uses: actions/checkout@v4

      # Step 2: Set up Java environment
      - name: setup
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # Step 3: Set up Gradle
      - name: setup gradle
        uses: gradle/gradle-build-action@v2

      # Step 4: Set execute permissions for Gradle wrapper
      - name: define shell permit
        run: chmod +x ./gradlew

      # Step 5: Build the application
      - name: build
        run: ./gradlew clean build

      # Step 6: Configure AWS Credentials
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: 'ap-southeast-2'
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_ACCESS_KEY }}

      # Step 7: Login to Amazon ECR using AWS_ACCESS_KEY_ID
      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com

      # Step 8: Build and Push Docker Image to ECR
      - name: build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: 'true'
          tags: |
            ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
            ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:latest
          file: ./Dockerfile

#  modifygit:
#    needs: docker
#    runs-on: ubuntu-latest
#    steps:
#      # Step 1: Checkout Deployment Repository
#      - name: Checkout Deployment Repository
#        uses: actions/checkout@v3
#        with:
#          repository: 'louisnguyen88/iac_checkweather'
#          token: ${{ secrets.GIT_PASSWORD }}
#
#      # Step 2: Update Deployment Image
#      - name: Update Deployment Image
#        run: |
#          # Configure Git
#          git config user.email "louisnguyen252@gmail.com"
#          git config user.name "louisnguyen88"
#
#          # Replace the image tag in the deployment.yaml file
#          sed -i "s+image:.*+image: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}+g" deployment.yaml
#
#          # Verify changes
#          echo "Updated deployment.yaml file:"
#          cat deployment.yaml
#
#          # Commit and push changes
#          git add deployment.yaml
#          git commit -m "Update Docker image to ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}"
#          git push origin main
#        env:
#          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
#          AWS_REGION: ${{ env.AWS_REGION }}
#          IMAGE_TAG: ${{ env.IMAGE_TAG }}

#  trigger-argocd:
#    needs: modifygit
#    runs-on: ubuntu-latest
#    steps:
#      - name: Install Argo CD CLI
#        run: curl -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64 && chmod +x /usr/local/bin/argocd
#      - name: Login to Argo CD
#        run: |
#          argocd login <ARGO_CD_SERVER> \
#            --username ${{ secrets.ARGOCD_USERNAME }} \
#            --password ${{ secrets.ARGOCD_PASSWORD }} \
#            --grpc-web
#      - name: Trigger Argo CD Sync
#        run: |
#          argocd app sync check-weather-app \
#            --grpc-web